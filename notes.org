* BULK
  Binary Uniform Language Kit

  - byte-based, big-endian
  - binary symbolic expressions
  - expressions: atoms and forms
    - atoms include:
      - nil, arrays, integers
      - references
	- a reference is a namespace identifier followed by a
          reference identifier
	- the namespace identifier is an unsigned integer represented
          either a byte between Ox10 and 0x254 (inclusive) or a
          sequence of one or several Ox255 bytes followed by a byte
          between 0x0 and Ox254;
	  - NSID Ox10 to Ox1F are reserved to be used as standard
            namespaces defined by BULK specifications
	- the reference identifier is an unsigned integer represented
          by a single byte
    - forms are series of expressions between Ox1 and Ox2 bytes
  - namespaces have a UUID
    - NS defined as part of the BULK specification use a v5 UUID with
      urn:uuid:abaddeed-face-11e2-9605-74de2b4102f1 as namespace

** stdlib
   Description template:
   - M = marker byte
   - shape
     - 1B, 2B, etc. = 1 byte, 2 bytes, etc.
     - nB = dynamic number of bytes
   - <foo> = placeholder
     - optionnally <foo>:constraint
     - constraint can be shape or type


   O. nil
   1. (
   2. )
   3. Array: M <dim> <content>:nB
      - dim = Int | ( Int+ ): dimensions (in bytes)
      - arrays are used whenever a vector or matrix is needed
	- an application is free to pack any kind of data
	- the semantics of the content must be inferred by the
          application; where ambiguity can appear, an application
          SHOULD enclose the array in a type-denoting form
   4. 32 bits word (is a *Word*): M 4B
   5. 64 bits word (is a *Word*): M 8B
   6. 128 bits word (is a *Word*): M 16N
   7. 8 bits unsigned integer (is a *Int*): M 1B
   8. 32, 64 or 128 bits unsigned integer (is a *Int*): M Word
   9. 32, 64 or 128 bits signed integer (is a *Int*): M Word


   OxA−OxF atoms reserved for future major versions of BULK.

** BULK core namespace
   NSID: Ox10

   1. ( version Int Int ): version
   2. ( ns <id>:Int <uuid>:Word ): NS declaration
   3. ( ns* <id>:Int <uuid>:Word ): NS declaration (optional to
      processing)
   4. ( stringenc <id> ): strings encoding
      - =id= is an encoding designator
	- an Int designates an encoding among the registered IANA
          Character Sets, by its MIBenum.
   5. ( codepage Int ): Windows code page
      - encoding designator; designates a Windows code page by its
        identifier
   6. true
   7. false


   The following forms affect the reader after they appeared: =ns=,
   =ns*=, =stringenc=. =version= MUST be the first expression of a
   BULK stream.

** BULK arithmetic namespace
   NSID: Ox11

   1. ( frac Int Int ): fraction
   2. ( bigint Array ): arbitrary precision signed integer (is a *Int*)
      - the array MUST be one-dimensional
      - reader MUST recognize it, but MAY refuse an integer it has no
        datatype to store
   3. ( binary <bits> ): IEEE 754-2008 binary interchange format
      - bits = Word | Array; if using an array, its size MUST be a
        multiple of 4
   4. ( decimal <bits> ): IEEE 754-2008 decimal interchange format


   Binary and decimal FP are defined in IEEE 754-2008 3.4−6. They are
   specified only for multiples of 32 bits (and binary for 16 bits,
   which is not included here).

   All number forms MUST be reckognized as numbers, but an application
   MAY consider them as an unknown value.

** XML Infoset namespace
   urn:uuid:a2a97ec6-85f9-5aed-89b2-7ca3cafc2093 (BULK
   http://www.w3.org/TR/2004/REC-xml-infoset-20040204/)

   1. Infoset
   2. Document
   3. Element
   4. Attribute
   5. Processing instruction
   6. Unexpanded entity
   7. Comment
   8. DTD
   9. Unparsed entity
   10. Notation
   11. NS

** RDF namespace
   urn:uuid:ed460331-a89b-5742-a8de-907dff727779 (BULK
   [[http://www.w3.org/1999/02/22-rdf-syntax-ns#]])

** Efficient XML/BULK transformation
   BULK equivalent to XML Schema, used by an application to compact
   XML to the fullest.

   - enumeration attributes become a single reference instead of a
     form enclosing a string
   - macrology may be defined to further compact common use cases
